@startuml

top to bottom direction
skinparam linetype ortho

class needed.ActionMaker {
  + ActionMaker(): 
}
class needed.Arm {
  + Arm(OrientationOfPart): 
  + inHand: ArrayList<Object>
  ~ isIn: boolean
  + coordX: double
  + coordY: double
  ~ orientation: OrientationOfPart
  + angleOnBody: double
  ~ typeOfBodyPart: TypeOfBodyPart
  + handAngleOnArm: double
  + setHandAngleOnArm(double): void
  + getCoordY(): double
  + setAngleOnBody(double): void
  + getHandAngleOnArm(): double
  + getCoordX(): double
  + setCoordX(double): void
  + getAngleOnBody(): double
  + setCoordY(double): void
}
class exceptions.BecomeDeafException {
  + BecomeDeafException(String): 
}
class environment.heroes.Begemot {
  + Begemot(): 
  ~ age: double
  ~ name: String
  ~ gender: Gender
  + moveHero(double, double, double, double): void
  + fakeEnvironmentCreator(): void
}
class needed.Bottom {
  + Bottom(): 
  ~ orientation: OrientationOfPart
  ~ isIn: boolean
  ~ slantAngleOfBody: double
  ~ typeOfBodyPart: TypeOfBodyPart
  ~ turnAngleOfBody: double
  + getTurnAngleOfBody(): double
  + isIn(): boolean
  + setTurnAngleOfBody(double): void
  + setIn(boolean): void
  + getSlantAngleOfBody(): double
  + setSlantAngleOfBody(double): void
}
class environment.fakeEnvironment.Branch {
  + Branch(double): 
  + Liana: Liana
  ~ length: double
}
class needed.Chest {
  + Chest(): 
  ~ isIn: boolean
  ~ typeOfBodyPart: TypeOfBodyPart
  ~ orientation: OrientationOfPart
}
enum enums.Colours << enumeration >> {
  + Colours(): 
  + WHITE: 
  + BLACK: 
  + valueOf(String): Colours
  + values(): Colours[]
}
class environment.orchestra.Conductor {
  + Conductor(InstrumentType): 
  ~ name: String
  ~ whiteStick: Stick
  + stickFollowing(): void
  + makeStopPlaying(): void
  - armsMover(): void
  + moveHero(double, double, double, double): void
  + makeToPlay(boolean): void
}
class environment.heroes.Frachnik {
  + Frachnik(): 
  ~ gender: Gender
  ~ name: String
  ~ age: double
  + moveHero(double, double, double, double): void
}
enum enums.Gender << enumeration >> {
  + Gender(): 
  + FEMALE: 
  + MALE: 
  + ZERO: 
  + values(): Gender[]
  + valueOf(String): Gender
}
class needed.Head {
  + Head(): 
  ~ nodAngle: double
  ~ isIn: boolean
  ~ isWhite: boolean
  ~ typeOfBodyPart: TypeOfBodyPart
  ~ turningAngle: double
  ~ orientation: OrientationOfPart
  ~ isSmiling: boolean
  + setTurningAngle(double): void
  + getSmiling(): boolean
  + getTurningAngle(): double
  + setSmiling(boolean): void
  + getNodAngle(): double
  + setNodAngle(double): void
}
class needed.HeroesGenerator {
  + HeroesGenerator(): 
  ~ margarita: Margarita
  ~ frachniks: Frachnik[]
  ~ korovyev: Korovyev
  ~ begemot: Begemot
}
class needed.Human {
  + Human(Gender, double, String): 
  + Human(): 
  + rArm: Arm
  - name: String
  - gender: Gender
  + head: Head
  + chest: Chest
  - age: double
  ~ random: Random
  ~ utils: Utils
  + bottom: Bottom
  + rLeg: Leg
  + lLeg: Leg
  - earHP: double
  + lArm: Arm
  + setName(String): void
  + setGender(Gender): void
  + setAge(double): void
  + getEarHP(): double
  + moveHero(double, double, double, double): void
  + slantBody(Human, double): void
  + turnBody(Human, double): void
  + speak(double, String): void
  + turningHead(Human, double): void
  + moveFullArmForDegree(Human, OrientationOfPart, double): void
  + changeSmileCondition(Human): void
  + setEarHP(double): void
  + noddingHead(Human, double): void
  + handOnArmSlanter(Human, OrientationOfPart, double): void
}
enum enums.InstrumentType << enumeration >> {
  + InstrumentType(): 
  + NOINSTRUMENT: 
  + VIOLIN: 
  + TRUMPET: 
  + values(): InstrumentType[]
  + valueOf(String): InstrumentType
}
class environment.heroes.Korovyev {
  + Korovyev(): 
  ~ gender: Gender
  ~ age: double
  ~ name: String
  + moveHero(double, double, double, double): void
}
class needed.Leg {
  + Leg(OrientationOfPart): 
  ~ orientation: OrientationOfPart
  ~ typeOfBodyPart: TypeOfBodyPart
  ~ isIn: boolean
}
class environment.fakeEnvironment.Liana {
  + Liana(): 
  ~ onLiana: ArrayList<Object>
  ~ test: double
  + removeHumanFromLiana(Human): void
  + putObjectInLiana(Object): void
  + putHumanInLiana(Human): void
  + removeObjectFromLiana(Object): void
}
class location.Locator {
  + Locator(): 
  + wallYCoordinate: double
  + fakeEnvironmentXStartCoordinate: double
  + heroBegemotXCoordinate: double
  + npcVietanXCoordinate: double
  + orchestraAnsambleOtherEndXCoordinate: double
  + orchestraAnsambleOtherEndYCoordinate: double
  ~ random: Random
  + npcFrachnikXCoordinate: double
  + roomYCoordinate: double
  + orchestraAnsambleViolinEndXCoordinate: double
  + orchestraAnsambleOtherStartYCoordinate: double
  + npcConductorXCoordinate: double
  + wallXCoordinate: double
  + fakeEnvironmentXEndCoordinate: double
  + heroMargaritaYCoordinate: double
  + fakeEnvironmentYEndCoordinate: double
  + orchestraAnsambleStartYCoordinate: double
  + heroKorovyevXCoordinate: double
  + npcVietanYCoordinate: double
  + heroBegemotYCoordinate: double
  + orchestraAnsambleStartXCoordinate: double
  + orchestraAnsambleViolinEndYCoordinate: double
  + roomXCoordinate: double
  + fakeEnvironmentYStartCoordinate: double
  ~ utuls: Utils
  + orchestraAnsambleEndXCoordinate: double
  + orchestraAnsambleOtherStartXCoordinate: double
  + orchestraAnsambleViolinStartXCoordinate: double
  + heroKorovyevYCoordinate: double
  + npcFrachnikYCoordinate: double
  + orchestraAnsambleEndYCoordinate: double
  + orchestraAnsambleViolinStartYCoordinate: double
  + npcConductorYCoordinate: double
  + heroMargaritaXCoordinate: double
  + getHeroMargaritaXCoordinate(): double
  + getHeroMargaritaYCoordinate(): double
  - mainGeneratorOfPlace(): void
}
class Main {
  + Main(): 
  + main(String[]): void
}
interface needed.interfaces.MakeToPlay << interface >> {
  + makeToPlay(boolean): void
}
class environment.heroes.Margarita {
  + Margarita(): 
  ~ height: double
  + visionListHuman: ArrayList<Human>
  ~ gender: Gender
  ~ age: double
  + xCoord: double
  + wall: Wall
  + visionList: ArrayList<Object>
  ~ name: String
  ~ random: Random
  + yCoord: double
  ~ utils: Utils
  + moveHero(double, double, double, double): void
}
class environment.orchestra.Musician {
  + Musician(InstrumentType): 
  ~ isHealthy: boolean
  ~ instrumentType: InstrumentType
  ~ random: Random
  ~ isPlaying: boolean
  + moveHero(double, double, double, double): void
  + healthyChecker(Musician): void
}
class exceptions.NotMovingArmsException {
  + NotMovingArmsException(String): 
}
class environment.orchestra.OrchestraAll {
  + OrchestraAll(): 
  + violinPartOfOrchestra: ViolinPartOfOrchestra
  + trumpetPartOfOrchestra: TrumpetPartOfOrchestra
  + getTrumpetPartOfOrchestra(): TrumpetPartOfOrchestra
  + getViolinPartOfOrchestra(): ViolinPartOfOrchestra
  + getIJMusician(Musician[][], int, int): Musician
}
enum enums.OrientationOfPart << enumeration >> {
  + OrientationOfPart(): 
  + ZERO: 
  + RIGHT: 
  + LEFT: 
  + values(): OrientationOfPart[]
  + valueOf(String): OrientationOfPart
}
class needed.utils.PairCoordinates {
  + PairCoordinates(double, double): 
  ~ x: double
  ~ y: double
  + getX(): double
  + getY(): double
}
class exceptions.SomeoneInOrchestraIsSickException {
  + SomeoneInOrchestraIsSickException(String): 
}
class exceptions.SomeoneIsPlayingException {
  + SomeoneIsPlayingException(String): 
}
class needed.Stick {
  + Stick(double, Colours): 
  + colour: Colours
  + angle: double
  + length: double
  + getAngle(): double
  + setAngle(double): void
}
interface needed.Interfaces.Talkable << interface >>
class environment.fakeEnvironment.Tree {
  + Tree(double, double): 
  ~ radius: double
  ~ height: double
  + getHeight(): double
  + getRadius(): double
}
class environment.fakeEnvironment.TropicalGarden {
  + TropicalGarden(): 
  + tree: Tree
  + liana: Liana
  + branch: Branch
}
class environment.orchestra.TrumpetPartOfOrchestra {
  + TrumpetPartOfOrchestra(): 
  ~ lenght: double
  ~ height: double
  + trumpetsAll: Musician[][]
  ~ numberOfMusiciansInRow: int
  ~ numberOfMusiciansInColumn: int
}
entity environment.Tulip << record >> {
  + Tulip(double, boolean): 
  - numberOfPetals: double
  - isOpened: boolean
  + numberOfPetals(): double
  + isOpened(): boolean
}
enum enums.TypeOfBodyPart << enumeration >> {
  + TypeOfBodyPart(): 
  + BOTTOM: 
  + ARM: 
  + LEG: 
  + HEAD: 
  + CHEST: 
  + values(): TypeOfBodyPart[]
  + valueOf(String): TypeOfBodyPart
}
class needed.utils.Utils {
  + Utils(): 
  + wallGrowHeightChecker(double, double): void
  + wallExistenceChecker(Wall): void
  + pairCoordinatesGenerator(double, double): PairCoordinates
  + earHPChecker(Human): void
}
class environment.orchestra.ViolinPartOfOrchestra {
  + ViolinPartOfOrchestra(): 
  ~ numberOfMusiciansInRow: int
  ~ lenght: double
  ~ height: double
  ~ numberOfMusiciansInColumn: int
  + violinsAll: Musician[][]
}
class environment.Wall {
  + Wall(): 
  ~ tulipArray: Tulip[][]
  ~ random: Random
  ~ height: int
  + isExists: boolean
  ~ width: int
  + tulipGrowerOnWall(): void
  + getHeight(): int
}
class exceptions.WallHeightException {
  + WallHeightException(String): 
}
class exceptions.WallIsAlreadyExistsException {
  + WallIsAlreadyExistsException(String): 
}
class exceptions.WrongArmPositionException {
  + WrongArmPositionException(String): 
}
class exceptions.WrongHeadAngleException {
  + WrongHeadAngleException(String): 
}
class exceptions.WrongHeadNodAngleException {
  + WrongHeadNodAngleException(String): 
}

ActionMaker                        -[#595959,dashed]->  Conductor                         : "«create»"
ActionMaker                        -[#595959,dashed]->  HeroesGenerator                   : "«create»"
ActionMaker                        -[#595959,dashed]->  OrchestraAll                      : "«create»"
ActionMaker                        -[#595959,dashed]->  TropicalGarden                    : "«create»"
Arm                                +-[#820000,plain]-  Human                             
Arm                               "1" *-[#595959,plain]-> "orientation\n1" OrientationOfPart                 
Arm                               "1" *-[#595959,plain]-> "typeOfBodyPart\n1" TypeOfBodyPart                    
Begemot                           "1" *-[#595959,plain]-> "gender\n1" Gender                            
Begemot                            -[#000082,plain]-^  Human                             
Begemot                            -[#595959,dashed]->  TropicalGarden                    : "«create»"
Bottom                             +-[#820000,plain]-  Human                             
Bottom                            "1" *-[#595959,plain]-> "orientation\n1" OrientationOfPart                 
Bottom                            "1" *-[#595959,plain]-> "typeOfBodyPart\n1" TypeOfBodyPart                    
Branch                            "1" *-[#595959,plain]-> "Liana\n1" Liana                             
Branch                             +-[#820000,plain]-  TropicalGarden                    
Chest                              +-[#820000,plain]-  Human                             
Chest                             "1" *-[#595959,plain]-> "orientation\n1" OrientationOfPart                 
Chest                             "1" *-[#595959,plain]-> "typeOfBodyPart\n1" TypeOfBodyPart                    
Conductor                          -[#008200,dashed]-^  MakeToPlay                        
Conductor                          -[#000082,plain]-^  Musician                          
Conductor                          -[#595959,dashed]->  NotMovingArmsException            : "«create»"
Conductor                          -[#595959,dashed]->  OrchestraAll                      : "«create»"
Conductor                          -[#595959,dashed]->  SomeoneIsPlayingException         : "«create»"
Conductor                         "1" *-[#595959,plain]-> "whiteStick\n1" Stick                             
Conductor                          -[#595959,dashed]->  Stick                             : "«create»"
Frachnik                          "1" *-[#595959,plain]-> "gender\n1" Gender                            
Frachnik                           -[#000082,plain]-^  Human                             
Head                               +-[#820000,plain]-  Human                             
Head                              "1" *-[#595959,plain]-> "orientation\n1" OrientationOfPart                 
Head                              "1" *-[#595959,plain]-> "typeOfBodyPart\n1" TypeOfBodyPart                    
HeroesGenerator                    -[#595959,dashed]->  Begemot                           : "«create»"
HeroesGenerator                   "1" *-[#595959,plain]-> "begemot\n1" Begemot                           
HeroesGenerator                    -[#595959,dashed]->  Frachnik                          : "«create»"
HeroesGenerator                   "1" *-[#595959,plain]-> "frachniks\n*" Frachnik                          
HeroesGenerator                   "1" *-[#595959,plain]-> "korovyev\n1" Korovyev                          
HeroesGenerator                    -[#595959,dashed]->  Korovyev                          : "«create»"
HeroesGenerator                   "1" *-[#595959,plain]-> "margarita\n1" Margarita                         
HeroesGenerator                    -[#595959,dashed]->  Margarita                         : "«create»"
Human                             "1" *-[#595959,plain]-> "rArm\n1" Arm                               
Human                              -[#595959,dashed]->  Arm                               : "«create»"
Human                              -[#595959,dashed]->  Bottom                            : "«create»"
Human                             "1" *-[#595959,plain]-> "bottom\n1" Bottom                            
Human                              -[#595959,dashed]->  Chest                             : "«create»"
Human                             "1" *-[#595959,plain]-> "chest\n1" Chest                             
Human                             "1" *-[#595959,plain]-> "gender\n1" Gender                            
Human                             "1" *-[#595959,plain]-> "head\n1" Head                              
Human                              -[#595959,dashed]->  Head                              : "«create»"
Human                              -[#595959,dashed]->  Leg                               : "«create»"
Human                             "1" *-[#595959,plain]-> "rLeg\n1" Leg                               
Human                              -[#595959,dashed]->  Utils                             : "«create»"
Human                             "1" *-[#595959,plain]-> "utils\n1" Utils                             
Human                              -[#595959,dashed]->  WrongArmPositionException         : "«create»"
Human                              -[#595959,dashed]->  WrongHeadAngleException           : "«create»"
Human                              -[#595959,dashed]->  WrongHeadNodAngleException        : "«create»"
Korovyev                          "1" *-[#595959,plain]-> "gender\n1" Gender                            
Korovyev                           -[#000082,plain]-^  Human                             
Leg                                +-[#820000,plain]-  Human                             
Leg                               "1" *-[#595959,plain]-> "orientation\n1" OrientationOfPart                 
Leg                               "1" *-[#595959,plain]-> "typeOfBodyPart\n1" TypeOfBodyPart                    
Liana                              +-[#820000,plain]-  Branch                            
Locator                            -[#595959,dashed]->  Utils                             : "«create»"
Locator                           "1" *-[#595959,plain]-> "utuls\n1" Utils                             
Main                               -[#595959,dashed]->  ActionMaker                       : "«create»"
Main                               -[#595959,dashed]->  Locator                           : "«create»"
Margarita                         "1" *-[#595959,plain]-> "gender\n1" Gender                            
Margarita                          -[#000082,plain]-^  Human                             
Margarita                         "1" *-[#595959,plain]-> "visionListHuman\n*" Human                             
Margarita                         "1" *-[#595959,plain]-> "utils\n1" Utils                             
Margarita                          -[#595959,dashed]->  Utils                             : "«create»"
Margarita                         "1" *-[#595959,plain]-> "wall\n1" Wall                              
Margarita                          -[#595959,dashed]->  Wall                              : "«create»"
Musician                           -[#000082,plain]-^  Human                             
Musician                          "1" *-[#595959,plain]-> "instrumentType\n1" InstrumentType                    
Musician                           -[#595959,dashed]->  SomeoneInOrchestraIsSickException : "«create»"
OrchestraAll                       -[#595959,dashed]->  TrumpetPartOfOrchestra            : "«create»"
OrchestraAll                      "1" *-[#595959,plain]-> "trumpetPartOfOrchestra\n1" TrumpetPartOfOrchestra            
OrchestraAll                      "1" *-[#595959,plain]-> "violinPartOfOrchestra\n1" ViolinPartOfOrchestra             
OrchestraAll                       -[#595959,dashed]->  ViolinPartOfOrchestra             : "«create»"
Stick                             "1" *-[#595959,plain]-> "colour\n1" Colours                           
Stick                              +-[#820000,plain]-  Conductor                         
Tree                               +-[#820000,plain]-  TropicalGarden                    
TropicalGarden                     -[#595959,dashed]->  Branch                            : "«create»"
TropicalGarden                    "1" *-[#595959,plain]-> "branch\n1" Branch                            
TropicalGarden                    "1" *-[#595959,plain]-> "liana\n1" Liana                             
TropicalGarden                     -[#595959,dashed]->  Liana                             : "«create»"
TropicalGarden                    "1" *-[#595959,plain]-> "tree\n1" Tree                              
TropicalGarden                     -[#595959,dashed]->  Tree                              : "«create»"
TrumpetPartOfOrchestra            "1" *-[#595959,plain]-> "trumpetsAll\n*" Musician                          
TrumpetPartOfOrchestra             -[#595959,dashed]->  Musician                          : "«create»"
Utils                              -[#595959,dashed]->  BecomeDeafException               : "«create»"
Utils                              -[#595959,dashed]->  PairCoordinates                   : "«create»"
Utils                              -[#595959,dashed]->  WallHeightException               : "«create»"
Utils                              -[#595959,dashed]->  WallIsAlreadyExistsException      : "«create»"
ViolinPartOfOrchestra              -[#595959,dashed]->  Musician                          : "«create»"
ViolinPartOfOrchestra             "1" *-[#595959,plain]-> "violinsAll\n*" Musician                          
Wall                              "1" *-[#595959,plain]-> "tulipArray\n*" Tulip                             
Wall                               -[#595959,dashed]->  Tulip                             : "«create»"
@enduml
